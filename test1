import javafx.application.Application;
import javafx.embed.swing.SwingFXUtils;
import javafx.geometry.Pos;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.Button;
import javafx.scene.control.ColorPicker;
import javafx.scene.control.Label;
import javafx.scene.control.Slider;
import javafx.scene.image.PixelReader;
import javafx.scene.image.PixelWriter;
import javafx.scene.image.WritableImage;
import javafx.scene.input.MouseButton;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import javafx.scene.image.PixelFormat;
import javafx.scene.image.WritablePixelFormat;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.awt.Graphics2D;



public class DrawingTool extends Application {

    private Canvas canvas;
    private GraphicsContext gc;

    private enum Tool { DRAW, ERASE }

    private Tool currentTool = Tool.DRAW;
    private double brushSize = 2.0;
    private double eraserSize = 10.0;
    private Color brushColor = Color.BLACK;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        // Create the drawing area
        canvas = new Canvas(800, 600);
        gc = canvas.getGraphicsContext2D();

        // Create buttons and event handlers
        Button drawButton = new Button("Draw");
        drawButton.setOnAction(e -> currentTool = Tool.DRAW);

        Button eraseButton = new Button("Erase");
        eraseButton.setOnAction(e -> currentTool = Tool.ERASE);

        // Create brush size slider
        Label brushSizeLabel = new Label("Brush Size:");
        Slider brushSizeSlider = new Slider(1, 10, brushSize);
        brushSizeSlider.setShowTickLabels(true);
        brushSizeSlider.setShowTickMarks(true);
        brushSizeSlider.valueProperty().addListener((obs, oldVal, newVal) -> brushSize = newVal.doubleValue());

        // Create eraser size slider
        Label eraserSizeLabel = new Label("Eraser Size:");
        Slider eraserSizeSlider = new Slider(5, 50, eraserSize);
        eraserSizeSlider.setShowTickLabels(true);
        eraserSizeSlider.setShowTickMarks(true);
        eraserSizeSlider.valueProperty().addListener((obs, oldVal, newVal) -> eraserSize = newVal.doubleValue());

        // Create color picker
        Label brushColorLabel = new Label("Brush Color:");
        ColorPicker colorPicker = new ColorPicker(brushColor);
        colorPicker.setOnAction(e -> brushColor = colorPicker.getValue());

        // Create export button
        Button exportButton = new Button("Export");
        exportButton.setOnAction(e -> exportImage());

        // Create the toolbar
        VBox toolbar = new VBox(10, drawButton, eraseButton, brushSizeLabel, brushSizeSlider, eraserSizeLabel,
                eraserSizeSlider, brushColorLabel, colorPicker, exportButton);
        toolbar.setAlignment(Pos.CENTER);
        toolbar.setPrefWidth(120);

        // Create the main layout
        BorderPane root = new BorderPane();
        root.setLeft(toolbar);
        root.setCenter(canvas);

        // Create the scene and display
        Scene scene = new Scene(root, 800, 600);
        primaryStage.setTitle("Drawing Tool");
        primaryStage.setScene(scene);
        primaryStage.show();

        // Set event handlers
        canvas.setOnMousePressed(e -> {
            if (e.getButton() == MouseButton.PRIMARY) {
                double x = e.getX();
                double y = e.getY();
                if (currentTool == Tool.DRAW) {
                    gc.setStroke(brushColor);
                    gc.setFill(brushColor);
                    gc.setLineWidth(brushSize);
                    gc.beginPath();
                    gc.moveTo(x, y);
                } else if (currentTool == Tool.ERASE) {
                    gc.clearRect(x - eraserSize / 2, y - eraserSize / 2, eraserSize, eraserSize);
                }
            }
        });

        canvas.setOnMouseDragged(e -> {
            if (e.getButton() == MouseButton.PRIMARY) {
                double x = e.getX();
                double y = e.getY();
                if (currentTool == Tool.DRAW) {
                    gc.lineTo(x, y);
                    gc.stroke();
                } else if (currentTool == Tool.ERASE) {
                    gc.clearRect(x - eraserSize / 2, y - eraserSize / 2, eraserSize, eraserSize);
                }
            }
        });
    }

private void exportImage() {
    FileChooser fileChooser = new FileChooser();
    fileChooser.getExtensionFilters().addAll(
            new FileChooser.ExtensionFilter("JPEG Image", "*.jpg"),
            new FileChooser.ExtensionFilter("All Files", "*.*")
    );

    File file = fileChooser.showSaveDialog(canvas.getScene().getWindow());

    if (file != null) {
        try {
            WritableImage writableImage = canvas.snapshot(null, null);

            // Create a BufferedImage with white background
            int width = (int) writableImage.getWidth();
            int height = (int) writableImage.getHeight();
            BufferedImage bufferedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);

            // Get the Graphics2D context of the BufferedImage
            Graphics2D graphics = bufferedImage.createGraphics();

            // Set the background color to white
            javafx.scene.paint.Color backgroundColor = javafx.scene.paint.Color.WHITE;
            graphics.setColor(new java.awt.Color(
                    (float) backgroundColor.getRed(),
                    (float) backgroundColor.getGreen(),
                    (float) backgroundColor.getBlue(),
                    (float) backgroundColor.getOpacity()
            ));
            graphics.fillRect(0, 0, width, height);

            // Draw the original image onto the BufferedImage with white background
            graphics.drawImage(SwingFXUtils.fromFXImage(writableImage, null), 0, 0, null);
            graphics.dispose();

            ImageIO.write(bufferedImage, "jpg", file);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
}


}
